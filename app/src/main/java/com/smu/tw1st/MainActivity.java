package com.smu.tw1st;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.app.DatePickerDialog;import android.os.Bundle;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.widget.ArrayAdapter;import android.widget.AutoCompleteTextView;import android.widget.DatePicker;import android.widget.EditText;import android.widget.MultiAutoCompleteTextView;import android.widget.TextView;import android.widget.Toast;import java.util.ArrayList;import java.util.Calendar;import java.util.List;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;public class MainActivity extends AppCompatActivity {    private int startYear;    private int startMonth;    private int startDay;    private int endYear;    private int endMonth;    private int endDay;    private RecyclerView recyclerView;    private RecyclerView.LayoutManager layoutManager;    private TextView tvCalendarOutDate;    private TextView tvCalendarIndate;    private AutoCompleteTextView acOutCity;    private AutoCompleteTextView acInCity;    private ArrayList<String> dataListOut;    private ArrayList<String> dataListIn;    private String TAG = MainActivity.class.getName();    private String Base_Url = "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com";    private int checkInOut;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        init();        getTextIn();        getTextOut();        rcvManager();    }    public void init() {        tvCalendarOutDate = findViewById(R.id.tvCalendarOutDate);        tvCalendarIndate = findViewById(R.id.tvCalendarInDate);        acInCity = findViewById(R.id.actvInCity);        acOutCity = findViewById(R.id.actvOutCity);        dataListOut = new ArrayList<>();        dataListIn = new ArrayList<>();    }    public void rcvManager() {        recyclerView = findViewById(R.id.rcvResult);        layoutManager = new LinearLayoutManager(this);        recyclerView.setLayoutManager(layoutManager);        ArrayList<Data> data = new ArrayList<>();        data.add(new Data("카약", R.drawable.ic_launcher_background, "36000원"));        RcvAdapter rcvAdapter = new RcvAdapter(data);        recyclerView.setAdapter(rcvAdapter);    }    public void calendarOutDate(View view) {        Calendar calendar = Calendar.getInstance();        DatePickerDialog.OnDateSetListener dateSetListener =                new DatePickerDialog.OnDateSetListener() {                    @Override                    public void onDateSet(DatePicker datePicker, int Year, int monthOfYear, int dayOfMonth) {                        String strDate = (Year) + "년";                        strDate += (monthOfYear + 1) + "월";                        strDate += (dayOfMonth) + "일";                        Toast.makeText(getApplicationContext(), strDate, Toast.LENGTH_SHORT).show();                        tvCalendarOutDate.setText(strDate);                    }                };        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                dateSetListener, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));        startYear = calendar.get(Calendar.YEAR);        startMonth = calendar.get(Calendar.MONTH);        startDay = calendar.get(Calendar.DAY_OF_MONTH);        datePickerDialog.show();    }    public void calendarInDate(View view) {        Calendar calendar = Calendar.getInstance();        DatePickerDialog.OnDateSetListener dateSetListener =                new DatePickerDialog.OnDateSetListener() {                    @Override                    public void onDateSet(DatePicker datePicker, int Year, int monthOfYear, int dayOfMonth) {                        String strDate = (Year) + "년";                        strDate += (monthOfYear + 1) + "월";                        strDate += (dayOfMonth) + "일";                        Toast.makeText(getApplicationContext(), strDate, Toast.LENGTH_SHORT).show();                        tvCalendarIndate.setText(strDate);                    }                };        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                dateSetListener, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));        endYear = calendar.get(Calendar.YEAR);        endMonth = calendar.get(Calendar.MONTH);        endDay = calendar.get(Calendar.DAY_OF_MONTH);        datePickerDialog.show();    }    public void getData(String query) {        Retrofit retrofit = new Retrofit.Builder()                .baseUrl(Base_Url)                .addConverterFactory(GsonConverterFactory.create())                .build();        RetrofitService service = retrofit.create(RetrofitService.class);        Call<ListPlace> call = service.getCityName(query);        call.enqueue(new Callback<ListPlace>() {            @Override            public void onResponse(Call<ListPlace> call, Response<ListPlace> response) {                try {                    ListPlace placeData = response.body();                    for (int i = 0; i < placeData.getPlaces().size(); i++) {                        if (checkInOut == 0) {                            dataListIn.add(placeData.getPlaces().get(i).getPlaceName());                            Log.d("들어간 것 : ", "::" + placeData.getPlaces().get(i).getPlaceName());                            dataListIn.add(placeData.getPlaces().get(i).getCountryName());                            Log.d("들어간 것 : ", "::" + placeData.getPlaces().get(i).getCountryName());                        } else {                            dataListOut.add(placeData.getPlaces().get(i).getPlaceName());                            Log.d("들어간 것 : ", "::" + placeData.getPlaces().get(i).getPlaceName());                            dataListOut.add(placeData.getPlaces().get(i).getCountryName());                            Log.d("들어간 것 : ", "::" + placeData.getPlaces().get(i).getCountryName());                        }                    }                } catch (Exception e) {                    Log.d("onResponse", "통신됐지만 Error ");                    e.printStackTrace();                }            }            @Override            public void onFailure(Call<ListPlace> call, Throwable t) {                Log.d(TAG, "통신실패");            }        });    }    public void autoListOut(String tempString) {        checkInOut = 1;        getData(tempString);        acOutCity.setAdapter(new ArrayAdapter<>(this,                android.R.layout.simple_dropdown_item_1line, dataListOut));    }    public void autoListIn(String tempString) {        checkInOut = 0;        getData(tempString);        acInCity.setAdapter(new ArrayAdapter<>(this,                android.R.layout.simple_dropdown_item_1line, dataListIn));    }    public void getTextIn() {        acInCity.setOnKeyListener(new View.OnKeyListener() {            @Override            public boolean onKey(View view, int i, KeyEvent keyEvent) {                switch (i) {                    case KeyEvent.KEYCODE_ENTER:                        String temp = acInCity.getText().toString();                        autoListIn(temp);                        break;                    default:                        return false;                }                return true;            }        });    }    public void getTextOut() {        acOutCity.setOnKeyListener(new View.OnKeyListener() {            @Override            public boolean onKey(View view, int i, KeyEvent keyEvent) {                switch (i) {                    case KeyEvent.KEYCODE_ENTER:                        String temp = acOutCity.getText().toString();                        autoListOut(temp);                        break;                    default:                        return false;                }                return true;            }        });    }}