<<<<<<< HEAD
package com.smu.tw1st;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.app.DatePickerDialog;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.View;import android.widget.ArrayAdapter;import android.widget.AutoCompleteTextView;import android.widget.DatePicker;import android.widget.TextView;import android.widget.Toast;import java.util.ArrayList;import java.util.Calendar;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;public class MainActivity extends AppCompatActivity {    private int startYear;    private int startMonth;    private int startDay;    private int endYear;    private int endMonth;    private int endDay;    private String OutCity;    private String InCity;    private RecyclerView recyclerView;    private RecyclerView.LayoutManager layoutManager;    private TextView tvCalendarOutDate;    private TextView tvCalendarIndate;    private AutoCompleteTextView acOutCity;    private AutoCompleteTextView acInCity;    private ArrayList<String> dataListOut;    private ArrayList<String> dataListIn;    private String TAG = MainActivity.class.getName();    private String Base_Url = "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com";    private int checkInOut;    private ArrayAdapter<String> arrayAdapterIn;    private ArrayAdapter<String> arrayAdapterOut;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        init();        getTextIn();        getTextOut();        rcvManager();    }    public void init() {        tvCalendarOutDate = findViewById(R.id.tvCalendarOutDate);        tvCalendarIndate = findViewById(R.id.tvCalendarInDate);        acInCity = findViewById(R.id.actvInCity);        acOutCity = findViewById(R.id.actvOutCity);        dataListOut = new ArrayList<>();        dataListIn = new ArrayList<>();    }    public void rcvManager() {        recyclerView = findViewById(R.id.rcvResult);        layoutManager = new LinearLayoutManager(this);        recyclerView.setLayoutManager(layoutManager);        ArrayList<Data> data = new ArrayList<>();        data.add(new Data("카약", R.drawable.ic_launcher_background, "36000원"));        data.add(new Data("스카이스캐너", R.drawable.ic_launcher_background, "480000원"));        data.add(new Data("익스피디아", R.drawable.ic_launcher_background, "25000원"));        data.add(new Data("티몬",R.drawable.ic_launcher_background,"23000원"));        data.add(new Data("11번가",R.drawable.ic_launcher_background,"8900원"));        RcvAdapter rcvAdapter = new RcvAdapter(data);        recyclerView.setAdapter(rcvAdapter);        recyclerView.setVisibility(View.GONE);    }    public void searchClicked(View view){        recyclerView.setVisibility(View.VISIBLE);    }    public void calendarOutDate(View view) {        Calendar calendar = Calendar.getInstance();        DatePickerDialog.OnDateSetListener dateSetListener =                new DatePickerDialog.OnDateSetListener() {                    @Override                    public void onDateSet(DatePicker datePicker, int Year, int monthOfYear, int dayOfMonth) {                        String strDate = (Year) + "년";                        strDate += (monthOfYear + 1) + "월";                        strDate += (dayOfMonth) + "일";                        Toast.makeText(getApplicationContext(), strDate, Toast.LENGTH_SHORT).show();                        tvCalendarOutDate.setText(strDate);                    }                };        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                dateSetListener, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));        startYear = calendar.get(Calendar.YEAR);        startMonth = calendar.get(Calendar.MONTH);        startDay = calendar.get(Calendar.DAY_OF_MONTH);        datePickerDialog.show();    }    public void calendarInDate(View view) {        Calendar calendar = Calendar.getInstance();        DatePickerDialog.OnDateSetListener dateSetListener =                new DatePickerDialog.OnDateSetListener() {                    @Override                    public void onDateSet(DatePicker datePicker, int Year, int monthOfYear, int dayOfMonth) {                        String strDate = (Year) + "년";                        strDate += (monthOfYear + 1) + "월";                        strDate += (dayOfMonth) + "일";                        Toast.makeText(getApplicationContext(), strDate, Toast.LENGTH_SHORT).show();                        tvCalendarIndate.setText(strDate);                    }                };        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                dateSetListener, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));        endYear = calendar.get(Calendar.YEAR);        endMonth = calendar.get(Calendar.MONTH);        endDay = calendar.get(Calendar.DAY_OF_MONTH);        datePickerDialog.show();    }    public void getData(String query) {        Retrofit retrofit = new Retrofit.Builder()                .baseUrl(Base_Url)                .addConverterFactory(GsonConverterFactory.create())                .build();        RetrofitService service = retrofit.create(RetrofitService.class);        Call<ListPlace> call = service.getCityName(query);        call.enqueue(new Callback<ListPlace>() {            @Override            public void onResponse(Call<ListPlace> call, Response<ListPlace> response) {                try {                    ListPlace placeData = response.body();                    dataListOut.clear();                    dataListIn.clear();                    for (int i = 0; i < placeData.getPlaces().size(); i++) {                        if (checkInOut == 0) {                            dataListOut.add(placeData.getPlaces().get(i).getPlaceName());                            Log.d("들어간 것 : ", "::" + placeData.getPlaces().get(i).getPlaceName());                        } else {                            dataListIn.add(placeData.getPlaces().get(i).getPlaceName());                            Log.d("들어간 것 : ", "::" + placeData.getPlaces().get(i).getPlaceName());                        }                    }                    Log.d(TAG, "-------------------");                } catch (Exception e) {                    Log.d("onResponse", "통신됐지만 Error ");                    e.printStackTrace();                }            }            @Override            public void onFailure(Call<ListPlace> call, Throwable t) {                Log.d(TAG, "통신실패");            }        });    }    public void autoListOut(String tempString) {        checkInOut = 0;        getData(tempString);        arrayAdapterOut = new ArrayAdapter<>(this, android.R.layout.simple_dropdown_item_1line, dataListOut);        acOutCity.setAdapter(arrayAdapterOut);        OutCity = acOutCity.getText().toString();        //Log.d(TAG,OutCity+"저장됨");    }    public void autoListIn(String tempString) {        checkInOut = 1;        getData(tempString);        arrayAdapterIn = new ArrayAdapter<>(this, android.R.layout.simple_dropdown_item_1line, dataListIn);        acInCity.setAdapter(arrayAdapterIn);        InCity = acInCity.getText().toString();        //Log.d(TAG,InCity+"저장됨");    }    public void getTextIn() {        acInCity.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {                String temp = acInCity.getText().toString();                autoListIn(temp);            }            @Override            public void afterTextChanged(Editable editable) {            }        });    }    public void getTextOut() {        acOutCity.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {                String temp = acOutCity.getText().toString();                autoListOut(temp);            }            @Override            public void afterTextChanged(Editable editable) {            }        });    }}
=======
package com.smu.tw1st;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.DividerItemDecoration;import androidx.recyclerview.widget.GridLayoutManager;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.recyclerview.widget.StaggeredGridLayoutManager;import android.app.DatePickerDialog;import android.os.AsyncTask;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.widget.ArrayAdapter;import android.widget.AutoCompleteTextView;import android.widget.DatePicker;import android.widget.EditText;import android.widget.MultiAutoCompleteTextView;import android.widget.TextView;import android.widget.Toast;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.List;import java.util.concurrent.ExecutionException;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;public class MainActivity extends AppCompatActivity {    private int startYear;    private int startMonth;    private int startDay;    private int endYear;    private int endMonth;    private int endDay;    private String OutCity;    private String InCity;    private RecyclerView recyclerView;    private RecyclerView.LayoutManager layoutManager;    private TextView tvCalendarOutDate;    private TextView tvCalendarIndate;    private AutoCompleteTextView acOutCity;    private AutoCompleteTextView acInCity;    private ArrayList<String> dataListOut;    private ArrayList<String> dataListIn;    private String TAG = MainActivity.class.getName();    private String Base_Url = "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com";    private int checkInOut;    private ArrayAdapter<String> arrayAdapterIn;    private ArrayAdapter<String> arrayAdapterOut;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        init();        getTextIn();        getTextOut();        String TresultText = "값이없음";        String ExresultText = "값이없음";        String SkiresultText = "값이없음";        try {            TresultText = new TmonTask().execute().get();            TresultText = TmonParser(TresultText);            ExresultText = new ExTask().execute().get();            ExresultText = ExParser(ExresultText);            SkiresultText = new ElevenTask().execute().get();            SkiresultText = ElevenParser(SkiresultText);        } catch (InterruptedException e) {            e.printStackTrace();        } catch (ExecutionException e) {            e.printStackTrace();        }        rcvManager(TresultText,ExresultText,SkiresultText);    }    public void init() {        tvCalendarOutDate = findViewById(R.id.tvCalendarOutDate);        tvCalendarIndate = findViewById(R.id.tvCalendarInDate);        acInCity = findViewById(R.id.actvInCity);        acOutCity = findViewById(R.id.actvOutCity);        dataListOut = new ArrayList<>();        dataListIn = new ArrayList<>();    }    public void rcvManager(String p1,String p2,String p3) {        recyclerView = findViewById(R.id.rcvResult);        //recyclerView.addItemDecoration(new DividerItemDecoration(recyclerView.getContext(),1));        layoutManager = new LinearLayoutManager(this);        //layoutManager = new GridLayoutManager(this,2);        //layoutManager = new StaggeredGridLayoutManager(2,StaggeredGridLayoutManager.HORIZONTAL);        recyclerView.setLayoutManager(layoutManager);        ArrayList<Data> data = new ArrayList<>();        data.add(new Data("티몬", R.drawable.ic_launcher_background, p1));        data.add(new Data("익스피디아", R.drawable.ic_launcher_background, p2));        data.add(new Data("와이페이모어", R.drawable.ic_launcher_background, p3));        RcvAdapter rcvAdapter = new RcvAdapter(data);        recyclerView.setAdapter(rcvAdapter);    }    public void calendarOutDate(View view) {        Calendar calendar = Calendar.getInstance();        DatePickerDialog.OnDateSetListener dateSetListener =                new DatePickerDialog.OnDateSetListener() {                    @Override                    public void onDateSet(DatePicker datePicker, int Year, int monthOfYear, int dayOfMonth) {                        String strDate = (Year) + "년";                        strDate += (monthOfYear + 1) + "월";                        strDate += (dayOfMonth) + "일";                        Toast.makeText(getApplicationContext(), strDate, Toast.LENGTH_SHORT).show();                        tvCalendarOutDate.setText(strDate);                    }                };        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                dateSetListener, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));        startYear = calendar.get(Calendar.YEAR);        startMonth = calendar.get(Calendar.MONTH);        startDay = calendar.get(Calendar.DAY_OF_MONTH);        datePickerDialog.show();    }    public void calendarInDate(View view) {        Calendar calendar = Calendar.getInstance();        DatePickerDialog.OnDateSetListener dateSetListener =                new DatePickerDialog.OnDateSetListener() {                    @Override                    public void onDateSet(DatePicker datePicker, int Year, int monthOfYear, int dayOfMonth) {                        String strDate = (Year) + "년";                        strDate += (monthOfYear + 1) + "월";                        strDate += (dayOfMonth) + "일";                        Toast.makeText(getApplicationContext(), strDate, Toast.LENGTH_SHORT).show();                        tvCalendarIndate.setText(strDate);                    }                };        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                dateSetListener, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));        endYear = calendar.get(Calendar.YEAR);        endMonth = calendar.get(Calendar.MONTH);        endDay = calendar.get(Calendar.DAY_OF_MONTH);        datePickerDialog.show();    }    public void getData(String query) {        Retrofit retrofit = new Retrofit.Builder()                .baseUrl(Base_Url)                .addConverterFactory(GsonConverterFactory.create())                .build();        RetrofitService service = retrofit.create(RetrofitService.class);        Call<ListPlace> call = service.getCityName(query);        call.enqueue(new Callback<ListPlace>() {            @Override            public void onResponse(Call<ListPlace> call, Response<ListPlace> response) {                try {                    ListPlace placeData = response.body();                    dataListOut.clear();                    dataListIn.clear();                    for (int i = 0; i < placeData.getPlaces().size(); i++) {                        if (checkInOut == 0) {                            dataListOut.add(placeData.getPlaces().get(i).getPlaceName());                            Log.d("들어간 것 : ", "::" + placeData.getPlaces().get(i).getPlaceName());                        } else {                            dataListIn.add(placeData.getPlaces().get(i).getPlaceName());                            Log.d("들어간 것 : ", "::" + placeData.getPlaces().get(i).getPlaceName());                        }                    }                    Log.d(TAG, "-------------------");                } catch (Exception e) {                    Log.d("onResponse", "통신됐지만 Error ");                    e.printStackTrace();                }            }            @Override            public void onFailure(Call<ListPlace> call, Throwable t) {                Log.d(TAG, "통신실패");            }        });    }    public void autoListOut(String tempString) {        checkInOut = 0;        getData(tempString);        arrayAdapterOut = new ArrayAdapter<>(this, android.R.layout.simple_dropdown_item_1line, dataListOut);        acOutCity.setAdapter(arrayAdapterOut);        OutCity = acOutCity.getText().toString();        //Log.d(TAG,OutCity+"저장됨");    }    public void autoListIn(String tempString) {        checkInOut = 1;        getData(tempString);        arrayAdapterIn = new ArrayAdapter<>(this, android.R.layout.simple_dropdown_item_1line, dataListIn);        acInCity.setAdapter(arrayAdapterIn);        InCity = acInCity.getText().toString();        //Log.d(TAG,InCity+"저장됨");    }    public void getTextIn() {        acInCity.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {                String temp = acInCity.getText().toString();                autoListIn(temp);            }            @Override            public void afterTextChanged(Editable editable) {            }        });    }    public void getTextOut() {        acOutCity.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {                String temp = acOutCity.getText().toString();                autoListOut(temp);            }            @Override            public void afterTextChanged(Editable editable) {            }        });    }    //아래부터내가함    public class TmonTask extends AsyncTask<String,String, String> {        String clientKey = "#########################";;        private String str, receiveMsg;        private final String ID = "########";        @Override        protected String doInBackground(String... params) {            URL url = null;            try {                url = new URL("http://tour.tmon.co.kr/api/direct/v1/airtktcommonapi/api/recommend/getPeriodLowPrice?tripType=RT&depCd=SEL&arrCd=TYO&depDd=2019-09-13&arrDd=2019-09-17&lowestPrice=999999");                HttpURLConnection conn = (HttpURLConnection) url.openConnection();                conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");                conn.setRequestProperty("x-waple-authorization", clientKey);                if (conn.getResponseCode() == conn.HTTP_OK) {                    InputStreamReader tmp = new InputStreamReader(conn.getInputStream(), "UTF-8");                    BufferedReader reader = new BufferedReader(tmp);                    StringBuffer buffer = new StringBuffer();                    while ((str = reader.readLine()) != null) {                        buffer.append(str);                    }                    receiveMsg = buffer.toString();                    Log.i("receiveMsg : ", receiveMsg);                    reader.close();                } else {                    Log.i("통신 결과", conn.getResponseCode() + "에러");                }            } catch (MalformedURLException e) {                e.printStackTrace();            } catch (IOException e) {                e.printStackTrace();            }            return receiveMsg;        }    }    public String TmonParser(String jsonString) {        String low = null;        try {            JSONArray jarray = new JSONObject(jsonString).getJSONArray("data");            for (int i = 0; i < jarray.length(); i++) {                HashMap map = new HashMap<>();                JSONObject jObject = jarray.getJSONObject(i);                low = jObject.optString("adult1ManFare");                return low;            }        } catch (JSONException e) {            e.printStackTrace();        }        return low;    }    public class ExTask extends AsyncTask<String,String, String> {        String clientKey = "#########################";;        private String str, receiveMsg;        private final String ID = "########";        @Override        protected String doInBackground(String... params) {            URL url = null;            try {                url = new URL("https://www.expedia.co.kr/FlightDiscovery?origin=ICN&destination=TYO&depart=2019-08-14&return=2019-08-17&adults=1&children=0&childAges=&inLap=true");//익스피디아는 출발일이 오늘날짜와 최소 5일 간격이 있어야함                HttpURLConnection conn = (HttpURLConnection) url.openConnection();                conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");                conn.setRequestProperty("x-waple-authorization", clientKey);                if (conn.getResponseCode() == conn.HTTP_OK) {                    InputStreamReader tmp = new InputStreamReader(conn.getInputStream(), "UTF-8");                    BufferedReader reader = new BufferedReader(tmp);                    StringBuffer buffer = new StringBuffer();                    while ((str = reader.readLine()) != null) {                        buffer.append(str);                    }                    receiveMsg = buffer.toString();                    Log.i("receiveMsg : ", receiveMsg);                    reader.close();                } else {                    Log.i("통신 결과", conn.getResponseCode() + "에러");                }            } catch (MalformedURLException e) {                e.printStackTrace();            } catch (IOException e) {                e.printStackTrace();            }            return receiveMsg;        }    }    public String ExParser(String jsonString) {        String low = null;        try {            JSONArray jarray = new JSONObject(jsonString).getJSONArray("assertions");            for (int i = 0; i < jarray.length(); i++) {                HashMap map = new HashMap<>();                JSONObject jObject = jarray.getJSONObject(i);                low = jObject.optString("formattedPrice");                return low;            }        } catch (JSONException e) {            e.printStackTrace();        }        return low;    }    public class ElevenTask extends AsyncTask<String,String, String> {        String clientKey = "#########################";;        private String str, receiveMsg;        private final String ID = "########";        @Override        protected String doInBackground(String... params) {            URL url = null;            try {                url = new URL("https://wpmesavail-staging.whypaymore.co.kr/flt/intl/fare-deals/ep?tripType=2&depLocCodes=SEL&depLocNames=서울(모든공항)&arrLocCodes=NRT&arrLocNames=도쿄(나리타)&dates=2019-08-20&dates=2019-08-23&seatCls=Y&adtCnt=1&appId=v2&searchSource=P&cabinCls=Y&opt=1&maxCxrDealLen=10");                HttpURLConnection conn = (HttpURLConnection) url.openConnection();                conn.setRequestMethod("GET");                conn.setDoInput(true);                conn.setDoOutput(true);                conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");                conn.setRequestProperty("x-waple-authorization", clientKey);                if (conn.getResponseCode() == conn.HTTP_OK) {                    InputStreamReader tmp = new InputStreamReader(conn.getInputStream(), "UTF-8");                    BufferedReader reader = new BufferedReader(tmp);                    StringBuffer buffer = new StringBuffer();                    while ((str = reader.readLine()) != null) {                        buffer.append(str);                    }                    receiveMsg = buffer.toString();                    Log.i("receiveMsg : ", receiveMsg);                    reader.close();                } else {                    Log.i("통신 결과", conn.getResponseCode() + "에러");                }            } catch (MalformedURLException e) {                e.printStackTrace();            } catch (IOException e) {                e.printStackTrace();            }            return receiveMsg;        }    }    public String ElevenParser(String jsonString) {        String low = null;        try {            JSONArray jarray = new JSONObject(jsonString).getJSONArray("resultValue");            for (int i = 0; i < jarray.length(); i++) {                HashMap map = new HashMap<>();                JSONObject jObject = jarray.getJSONObject(i);                low = jObject.optString("adtPricing");                low= low.substring(low.indexOf("totalPrice")+12,low.indexOf("}"));                return low;            }        } catch (JSONException e) {            e.printStackTrace();        }        return low;    }}
>>>>>>> 77cd1d8c2af23736d37b89ae8afa19d2d893d172
