<<<<<<< HEAD
package com.smu.tw1st;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.app.DatePickerDialog;import android.content.SharedPreferences;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.View;import android.widget.ArrayAdapter;import android.widget.AutoCompleteTextView;import android.widget.DatePicker;import android.widget.TextView;import android.widget.Toast;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.concurrent.ExecutionException;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;public class MainActivity extends AppCompatActivity implements RcvAdapter.RcvClickListener {    private int startYear;    private int startMonth;    private int startDay;    private int endYear;    private int endMonth;    private int endDay;    private String startDate;    private String endDate;    private String OutCity;    private String InCity;    private String OutPlaceId;    private String InPlaceId;    private RecyclerView recyclerView;    private RecyclerView.LayoutManager layoutManager;    private TextView tvCalendarOutDate;    private TextView tvCalendarIndate;    private AutoCompleteTextView acOutCity;    private AutoCompleteTextView acInCity;    private ArrayList<String> dataListOut;    private ArrayList<String> dataListIn;    private String TAG = MainActivity.class.getName();    private String Base_Url = "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com";    private int checkInOut;    private ArrayAdapter<String> arrayAdapterIn;    private ArrayAdapter<String> arrayAdapterOut;    private String TresultText = "값이없음";    private String ExresultText = "값이없음";    private String WpmresultText = "값이없음";    private String SkiresultText = "값이없음";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        init();        getTextIn();        getTextOut();        rcvManager();    }    public void init() {        tvCalendarOutDate = findViewById(R.id.tvCalendarOutDate);        tvCalendarIndate = findViewById(R.id.tvCalendarInDate);        acInCity = findViewById(R.id.actvInCity);        acOutCity = findViewById(R.id.actvOutCity);        dataListOut = new ArrayList<>();        dataListIn = new ArrayList<>();        try {            TresultText = new TmonTask().execute().get();            TresultText = TmonParser(TresultText);            ExresultText = new ExTask().execute().get();            ExresultText = ExParser(ExresultText);            WpmresultText = new ElevenTask().execute().get();            WpmresultText = ElevenParser(WpmresultText);            SkiresultText = new SkyTask().execute().get().toString();        } catch (InterruptedException e) {            e.printStackTrace();        } catch (ExecutionException e) {            e.printStackTrace();        }    }    public void rcvManager() {        recyclerView = findViewById(R.id.rcvResult);        layoutManager = new LinearLayoutManager(this);        recyclerView.setLayoutManager(layoutManager);        ArrayList<Data> data = new ArrayList<>();        data.add(new Data("티몬", R.drawable.ic_launcher_background, TresultText));        data.add(new Data("익스피디아", R.drawable.ic_launcher_background, ExresultText));        data.add(new Data("와이페이모어", R.drawable.ic_launcher_background, WpmresultText));        data.add(new Data("스카이티켓", R.drawable.ic_launcher_background, SkiresultText));        RcvAdapter rcvAdapter = new RcvAdapter(data);        recyclerView.setAdapter(rcvAdapter);        recyclerView.setVisibility(View.GONE);    }    @Override    public void onItemClicked(int position) {        switch (position) {            case 1:                //카약실행                break;            case 2:                //익스피디아 실행                break;            case 3:                //와이페이모어                break;            case 4:                //스카이티켓                break;        }    }    public void searchClicked(View view) {        recyclerView.setVisibility(View.VISIBLE);    }    public void calendarOutDate(View view) {        Calendar calendar = Calendar.getInstance();        DatePickerDialog.OnDateSetListener dateSetListener =                new DatePickerDialog.OnDateSetListener() {                    @Override                    public void onDateSet(DatePicker datePicker, int Year, int monthOfYear, int dayOfMonth) {                        String strDate = (Year) + "년";                        strDate += (monthOfYear + 1) + "월";                        strDate += (dayOfMonth) + "일";                        startDate = Year + "";                        startDate += (monthOfYear + 1) + "";                        startDate += (dayOfMonth) + "";                        Toast.makeText(getApplicationContext(), strDate, Toast.LENGTH_SHORT).show();                        tvCalendarOutDate.setText(strDate);                    }                };        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                dateSetListener, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));        startYear = calendar.get(Calendar.YEAR);        startMonth = calendar.get(Calendar.MONTH);        startDay = calendar.get(Calendar.DAY_OF_MONTH);        savePreferences("outDateFile", "OutDate", startDate);        datePickerDialog.show();    }    public void calendarInDate(View view) {        Calendar calendar = Calendar.getInstance();        DatePickerDialog.OnDateSetListener dateSetListener =                new DatePickerDialog.OnDateSetListener() {                    @Override                    public void onDateSet(DatePicker datePicker, int Year, int monthOfYear, int dayOfMonth) {                        String strDate = (Year) + "년";                        strDate += (monthOfYear + 1) + "월";                        strDate += (dayOfMonth) + "일";                        endDate = Year + "";                        endDate += (monthOfYear + 1) + "";                        endDate += (dayOfMonth) + "";                        Toast.makeText(getApplicationContext(), strDate, Toast.LENGTH_SHORT).show();                        tvCalendarIndate.setText(strDate);                    }                };        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                dateSetListener, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));        endYear = calendar.get(Calendar.YEAR);        endMonth = calendar.get(Calendar.MONTH);        endDay = calendar.get(Calendar.DAY_OF_MONTH);        savePreferences("inDateFile", "InDate", endDate);        datePickerDialog.show();    }    public void getData(String query) {        Retrofit retrofit = new Retrofit.Builder()                .baseUrl(Base_Url)                .addConverterFactory(GsonConverterFactory.create())                .build();        RetrofitService service = retrofit.create(RetrofitService.class);        Call<ListPlace> call = service.getCityName(query);        call.enqueue(new Callback<ListPlace>() {            @Override            public void onResponse(Call<ListPlace> call, Response<ListPlace> response) {                try {                    ListPlace placeData = response.body();                    dataListOut.clear();                    dataListIn.clear();                    for (int i = 0; i < placeData.getPlaces().size(); i++) {                        if (checkInOut == 0) {                            dataListOut.add(placeData.getPlaces().get(i).getPlaceName());                            Log.d("들어간 것 : ", "::" + placeData.getPlaces().get(i).getPlaceName());                            InPlaceId = placeData.getPlaces().get(i).getPlaceId();                            Log.d(TAG, InPlaceId);                        } else {                            dataListIn.add(placeData.getPlaces().get(i).getPlaceName());                            Log.d("들어간 것 : ", "::" + placeData.getPlaces().get(i).getPlaceName());                            OutPlaceId = placeData.getPlaces().get(i).getPlaceId();                            Log.d(TAG, OutPlaceId);                        }                    }                    Log.d(TAG, "-------------------");                } catch (Exception e) {                    Log.d("onResponse", "통신됐지만 Error ");                    e.printStackTrace();                }            }            @Override            public void onFailure(Call<ListPlace> call, Throwable t) {                Log.d(TAG, "통신실패");            }        });    }    public void autoListOut(String tempString) {        checkInOut = 0;        getData(tempString);        arrayAdapterOut = new ArrayAdapter<>(this, android.R.layout.simple_dropdown_item_1line, dataListOut);        acOutCity.setAdapter(arrayAdapterOut);        OutCity = acOutCity.getText().toString();    }    public void autoListIn(String tempString) {        checkInOut = 1;        getData(tempString);        arrayAdapterIn = new ArrayAdapter<>(this, android.R.layout.simple_dropdown_item_1line, dataListIn);        acInCity.setAdapter(arrayAdapterIn);        InCity = acInCity.getText().toString();    }    public void getTextIn() {        acInCity.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {                String temp = acInCity.getText().toString();                autoListIn(temp);            }            @Override            public void afterTextChanged(Editable editable) {            }        });    }    public void getTextOut() {        acOutCity.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {                String temp = acOutCity.getText().toString();                autoListOut(temp);            }            @Override            public void afterTextChanged(Editable editable) {            }        });    }    public void savePreferences(String file, String key, String value) {        SharedPreferences preferences = getSharedPreferences(file, MODE_PRIVATE);        SharedPreferences.Editor editor = preferences.edit();        editor.putString(key, value);        editor.apply();    }    public void getPreferences(String file, String key, String value) {        SharedPreferences preferences = getSharedPreferences(file, MODE_PRIVATE);        preferences.getString(key, value);    }    public String TmonParser(String jsonString) {        String low = null;        try {            JSONArray jarray = new JSONObject(jsonString).getJSONArray("data");            for (int i = 0; i < jarray.length(); i++) {                HashMap map = new HashMap<>();                JSONObject jObject = jarray.getJSONObject(i);                low = jObject.optString("adult1ManFare");                return low;            }        } catch (JSONException e) {            e.printStackTrace();        }        return low;    }    public String ExParser(String jsonString) {        String low = null;        try {            JSONArray jarray = new JSONObject(jsonString).getJSONArray("assertions");            for (int i = 0; i < jarray.length(); i++) {                HashMap map = new HashMap<>();                JSONObject jObject = jarray.getJSONObject(i);                low = jObject.optString("formattedPrice");                return low;            }        } catch (JSONException e) {            e.printStackTrace();        }        return low;    }    public String ElevenParser(String jsonString) {        String low = null;        try {            JSONArray jarray = new JSONObject(jsonString).getJSONArray("resultValue");            for (int i = 0; i < jarray.length(); i++) {                HashMap map = new HashMap<>();                JSONObject jObject = jarray.getJSONObject(i);                low = jObject.optString("adtPricing");                low = low.substring(low.indexOf("totalPrice") + 12, low.indexOf("}"));                return low;            }        } catch (JSONException e) {            e.printStackTrace();        }        return low;    }}
=======
package com.smu.tw1st;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.app.DatePickerDialog;import android.content.SharedPreferences;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.View;import android.widget.ArrayAdapter;import android.widget.AutoCompleteTextView;import android.widget.DatePicker;import android.widget.TextView;import android.widget.Toast;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.concurrent.ExecutionException;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;public class MainActivity extends AppCompatActivity implements RcvAdapter.RcvClickListener {    private int startYear;    private int startMonth;    private int startDay;    private String startDate;    private int endYear;    private int endMonth;    private int endDay;    private String endDate;    private String OutCity;    private String InCity;    private String OutPlaceId;    private String InPlaceId;    private RecyclerView recyclerView;    private RecyclerView.LayoutManager layoutManager;    private TextView tvCalendarOutDate;    private TextView tvCalendarIndate;    private AutoCompleteTextView acOutCity;    private AutoCompleteTextView acInCity;    private ArrayList<String> dataListOut;    private ArrayList<String> dataListIn;    private String TAG = MainActivity.class.getName();    private String Base_Url = "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com";    private int checkInOut;    private ArrayAdapter<String> arrayAdapterIn;    private ArrayAdapter<String> arrayAdapterOut;    private String TresultText = "값이없음";    private String ExresultText = "값이없음";    private String WpmresultText = "값이없음";    private String SkiresultText = "값이없음";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        init();        getTextIn();        getTextOut();    }    public void init() {        tvCalendarOutDate = findViewById(R.id.tvCalendarOutDate);        tvCalendarIndate = findViewById(R.id.tvCalendarInDate);        acInCity = findViewById(R.id.actvInCity);        acOutCity = findViewById(R.id.actvOutCity);        dataListOut = new ArrayList<>();        dataListIn = new ArrayList<>();    }    public void rcvManager() {        recyclerView = findViewById(R.id.rcvResult);        layoutManager = new LinearLayoutManager(this);        recyclerView.setLayoutManager(layoutManager);        ArrayList<Data> data = new ArrayList<>();        data.add(new Data("티몬", R.drawable.timon, TresultText));        data.add(new Data("익스피디아", R.drawable.expedia, ExresultText));        data.add(new Data("와이페이모어", R.drawable.whypaymore, WpmresultText));        data.add(new Data("스카이티켓", R.drawable.skyticket, SkiresultText));        RcvAdapter rcvAdapter = new RcvAdapter(data);        recyclerView.setAdapter(rcvAdapter);        recyclerView.setVisibility(View.VISIBLE);    }    @Override    public void onItemClicked(int position) {        switch (position) {            case 1:                //카약실행                break;            case 2:                //익스피디아 실행                break;            case 3:                //와이페이모어                break;            case 4:                //스카이티켓                break;        }    }    public void searchClicked(View view) {        searchResult();        rcvManager();    }    public void searchResult(){        try {            TresultText = new TmonTask().execute().get();            TresultText = TmonParser(TresultText);            ExresultText = new ExTask().execute().get();            ExresultText = ExParser(ExresultText);            WpmresultText = new ElevenTask().execute().get();            WpmresultText = ElevenParser(WpmresultText);            SkiresultText = new SkyTask().execute().get().toString();        } catch (InterruptedException e) {            e.printStackTrace();        } catch (ExecutionException e) {            e.printStackTrace();        }    }    public void calendarOutDate(View view) {        Calendar calendar = Calendar.getInstance();        DatePickerDialog.OnDateSetListener dateSetListener =                new DatePickerDialog.OnDateSetListener() {                    @Override                    public void onDateSet(DatePicker datePicker, int Year, int monthOfYear, int dayOfMonth) {                        String strDate = (Year) + "년";                        strDate += (monthOfYear + 1) + "월";                        strDate += (dayOfMonth) + "일";                        startDate = Year + "";                        startDate += (monthOfYear + 1) + "";                        startDate += (dayOfMonth) + "";                        Toast.makeText(getApplicationContext(), strDate, Toast.LENGTH_SHORT).show();                        tvCalendarOutDate.setText(strDate);                    }                };        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                dateSetListener, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));        startYear = calendar.get(Calendar.YEAR);        startMonth = calendar.get(Calendar.MONTH);        startDay = calendar.get(Calendar.DAY_OF_MONTH);        savePreferences("outDateFile","OutDate",startDate);        datePickerDialog.show();    }    public void calendarInDate(View view) {        Calendar calendar = Calendar.getInstance();        DatePickerDialog.OnDateSetListener dateSetListener =                new DatePickerDialog.OnDateSetListener() {                    @Override                    public void onDateSet(DatePicker datePicker, int Year, int monthOfYear, int dayOfMonth) {                        String strDate = (Year) + "년";                        strDate += (monthOfYear + 1) + "월";                        strDate += (dayOfMonth) + "일";                        endDate = Year + "";                        endDate += (monthOfYear + 1) + "";                        endDate += (dayOfMonth) + "";                        Toast.makeText(getApplicationContext(), strDate, Toast.LENGTH_SHORT).show();                        tvCalendarIndate.setText(strDate);                    }                };        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                dateSetListener, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));        endYear = calendar.get(Calendar.YEAR);        endMonth = calendar.get(Calendar.MONTH);        endDay = calendar.get(Calendar.DAY_OF_MONTH);        savePreferences("inDateFile","InDate",endDate);        datePickerDialog.show();    }    public void getData(String query) {        Retrofit retrofit = new Retrofit.Builder()                .baseUrl(Base_Url)                .addConverterFactory(GsonConverterFactory.create())                .build();        RetrofitService service = retrofit.create(RetrofitService.class);        Call<ListPlace> call = service.getCityName(query);        call.enqueue(new Callback<ListPlace>() {            @Override            public void onResponse(Call<ListPlace> call, Response<ListPlace> response) {                try {                    ListPlace placeData = response.body();                    dataListOut.clear();                    dataListIn.clear();                    for (int i = 0; i < placeData.getPlaces().size(); i++) {                        if (checkInOut == 0) {                            dataListOut.add(placeData.getPlaces().get(i).getPlaceName());                            Log.d("들어간 것 : ", "::" + placeData.getPlaces().get(i).getPlaceName());                            InPlaceId = placeData.getPlaces().get(i).getPlaceId();                            Log.d(TAG, InPlaceId);                        } else {                            dataListIn.add(placeData.getPlaces().get(i).getPlaceName());                            Log.d("들어간 것 : ", "::" + placeData.getPlaces().get(i).getPlaceName());                            OutPlaceId = placeData.getPlaces().get(i).getPlaceId();                            Log.d(TAG, OutPlaceId);                        }                    }                    Log.d(TAG, "-------------------");                } catch (Exception e) {                    Log.d("onResponse", "통신됐지만 Error ");                    e.printStackTrace();                }            }            @Override            public void onFailure(Call<ListPlace> call, Throwable t) {                Log.d(TAG, "통신실패");            }        });    }    public void autoListOut(String tempString) {        checkInOut = 0;        getData(tempString);        arrayAdapterOut = new ArrayAdapter<>(this, android.R.layout.simple_dropdown_item_1line, dataListOut);        acOutCity.setAdapter(arrayAdapterOut);        OutCity = acOutCity.getText().toString();    }    public void autoListIn(String tempString) {        checkInOut = 1;        getData(tempString);        arrayAdapterIn = new ArrayAdapter<>(this, android.R.layout.simple_dropdown_item_1line, dataListIn);        acInCity.setAdapter(arrayAdapterIn);        InCity = acInCity.getText().toString();    }    public void getTextIn() {        acInCity.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {                String temp = acInCity.getText().toString();                autoListIn(temp);            }            @Override            public void afterTextChanged(Editable editable) {            }        });    }    public void getTextOut() {        acOutCity.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {                String temp = acOutCity.getText().toString();                autoListOut(temp);            }            @Override            public void afterTextChanged(Editable editable) {            }        });    }    public void savePreferences(String file, String key, String value){        SharedPreferences preferences = getSharedPreferences(file,MODE_PRIVATE);        SharedPreferences.Editor editor = preferences.edit();        editor.putString(key,value);        editor.apply();    }    public void getPreferences(String file, String key, String value){        SharedPreferences preferences = getSharedPreferences(file,MODE_PRIVATE);        preferences.getString(key,value);    }    public String TmonParser(String jsonString) {        String low = null;        try {            JSONArray jarray = new JSONObject(jsonString).getJSONArray("data");            for (int i = 0; i < jarray.length(); i++) {                HashMap map = new HashMap<>();                JSONObject jObject = jarray.getJSONObject(i);                low = jObject.optString("adult1ManFare");                return low;            }        } catch (JSONException e) {            e.printStackTrace();        }        return low;    }    public String ExParser(String jsonString) {        String low = null;        try {            JSONArray jarray = new JSONObject(jsonString).getJSONArray("assertions");            for (int i = 0; i < jarray.length(); i++) {                HashMap map = new HashMap<>();                JSONObject jObject = jarray.getJSONObject(i);                low = jObject.optString("formattedPrice");                return low;            }        } catch (JSONException e) {            e.printStackTrace();        }        return low;    }    public String ElevenParser(String jsonString) {        String low = null;        try {            JSONArray jarray = new JSONObject(jsonString).getJSONArray("resultValue");            for (int i = 0; i < jarray.length(); i++) {                HashMap map = new HashMap<>();                JSONObject jObject = jarray.getJSONObject(i);                low = jObject.optString("adtPricing");                low = low.substring(low.indexOf("totalPrice") + 12, low.indexOf("}"));                return low;            }        } catch (JSONException e) {            e.printStackTrace();        }        return low;    }}
>>>>>>> 120adb73fe9eba98882699ec238adacd14a149d5
